/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    users: User;
    media: Media;
    solutions: Solution;
    'team-members': TeamMember;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    solutions: SolutionsSelect<false> | SolutionsSelect<true>;
    'team-members': TeamMembersSelect<false> | TeamMembersSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    homepage: Homepage;
    about: About;
  };
  globalsSelect: {
    homepage: HomepageSelect<false> | HomepageSelect<true>;
    about: AboutSelect<false> | AboutSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name: string;
  role?: ('user' | 'admin') | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  tags: ('solution' | 'service' | 'logo' | 'team' | 'other')[];
  blurDataUrl?: string | null;
  isDark?: boolean | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    blurred?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    thumb?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "solutions".
 */
export interface Solution {
  id: string;
  meta?: {
    slug?: string | null;
    published?: boolean | null;
    publishStart?: string | null;
    publishStop?: string | null;
  };
  type: {
    category: 'product' | 'service' | 'other';
    subCategory?:
      | ('thermal-characterization' | 'mechanical-characterization' | 'failure-analysis' | 'thermal-test-equipment')
      | null;
  };
  title: string;
  subtitle: string;
  shortDescription: string;
  /**
   * Whether this is a novel solution
   */
  new?: boolean | null;
  details: {
    images: (string | Media)[];
    abstract: string;
    content?:
      | (
          | {
              text: {
                root: {
                  type: string;
                  children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              };
              text_html?: string | null;
              id?: string | null;
              blockName?: string | null;
              blockType: 'text';
            }
          | {
              text: {
                root: {
                  type: string;
                  children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              };
              image: string | Media;
              text_html?: string | null;
              id?: string | null;
              blockName?: string | null;
              blockType: 'text-image';
            }
          | {
              title: string;
              text: string;
              link: string;
              variant?: ('primary' | 'secondary') | null;
              id?: string | null;
              blockName?: string | null;
              blockType: 'highlight';
            }
          | {
              text: {
                root: {
                  type: string;
                  children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              };
              videoId: string;
              text_html?: string | null;
              id?: string | null;
              blockName?: string | null;
              blockType: 'text-video';
            }
        )[]
      | null;
  };
  seo?: {
    keywords?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "team-members".
 */
export interface TeamMember {
  id: string;
  meta?: {
    slug?: string | null;
    published?: boolean | null;
    publishStart?: string | null;
    publishStop?: string | null;
  };
  name: string;
  position: string;
  portrait?: (string | null) | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'solutions';
        value: string | Solution;
      } | null)
    | ({
        relationTo: 'team-members';
        value: string | TeamMember;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  role?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  tags?: T;
  blurDataUrl?: T;
  isDark?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        blurred?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        thumb?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "solutions_select".
 */
export interface SolutionsSelect<T extends boolean = true> {
  meta?:
    | T
    | {
        slug?: T;
        published?: T;
        publishStart?: T;
        publishStop?: T;
      };
  type?:
    | T
    | {
        category?: T;
        subCategory?: T;
      };
  title?: T;
  subtitle?: T;
  shortDescription?: T;
  new?: T;
  details?:
    | T
    | {
        images?: T;
        abstract?: T;
        content?:
          | T
          | {
              text?:
                | T
                | {
                    text?: T;
                    text_html?: T;
                    id?: T;
                    blockName?: T;
                  };
              'text-image'?:
                | T
                | {
                    text?: T;
                    image?: T;
                    text_html?: T;
                    id?: T;
                    blockName?: T;
                  };
              highlight?:
                | T
                | {
                    title?: T;
                    text?: T;
                    link?: T;
                    variant?: T;
                    id?: T;
                    blockName?: T;
                  };
              'text-video'?:
                | T
                | {
                    text?: T;
                    videoId?: T;
                    text_html?: T;
                    id?: T;
                    blockName?: T;
                  };
            };
      };
  seo?:
    | T
    | {
        keywords?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "team-members_select".
 */
export interface TeamMembersSelect<T extends boolean = true> {
  meta?:
    | T
    | {
        slug?: T;
        published?: T;
        publishStart?: T;
        publishStop?: T;
      };
  name?: T;
  position?: T;
  portrait?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "homepage".
 */
export interface Homepage {
  id: string;
  jumbotron?:
    | {
        title: string;
        description: string;
        image: string | Media;
        link: string;
        linkLabel?: string | null;
        id?: string | null;
      }[]
    | null;
  content?:
    | (
        | {
            text: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            text_html?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            title: string;
            text: string;
            link: string;
            variant?: ('primary' | 'secondary') | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'highlight';
          }
        | {
            title: string;
            description?: string | null;
            cards: (string | Solution)[];
            id?: string | null;
            blockName?: string | null;
            blockType: 'cards';
          }
      )[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "about".
 */
export interface About {
  id: string;
  content?:
    | (
        | {
            text: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            text_html?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            text: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            image: string | Media;
            text_html?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text-image';
          }
        | {
            text: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            };
            videoId: string;
            text_html?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text-video';
          }
        | {
            title: string;
            description?: string | null;
            cards: (string | Solution)[];
            id?: string | null;
            blockName?: string | null;
            blockType: 'cards';
          }
      )[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "homepage_select".
 */
export interface HomepageSelect<T extends boolean = true> {
  jumbotron?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
        link?: T;
        linkLabel?: T;
        id?: T;
      };
  content?:
    | T
    | {
        text?:
          | T
          | {
              text?: T;
              text_html?: T;
              id?: T;
              blockName?: T;
            };
        highlight?:
          | T
          | {
              title?: T;
              text?: T;
              link?: T;
              variant?: T;
              id?: T;
              blockName?: T;
            };
        cards?:
          | T
          | {
              title?: T;
              description?: T;
              cards?: T;
              id?: T;
              blockName?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "about_select".
 */
export interface AboutSelect<T extends boolean = true> {
  content?:
    | T
    | {
        text?:
          | T
          | {
              text?: T;
              text_html?: T;
              id?: T;
              blockName?: T;
            };
        'text-image'?:
          | T
          | {
              text?: T;
              image?: T;
              text_html?: T;
              id?: T;
              blockName?: T;
            };
        'text-video'?:
          | T
          | {
              text?: T;
              videoId?: T;
              text_html?: T;
              id?: T;
              blockName?: T;
            };
        cards?:
          | T
          | {
              title?: T;
              description?: T;
              cards?: T;
              id?: T;
              blockName?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}